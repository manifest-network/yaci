# This is a docker-compose file that will start
#  - a postgres database,
#  - a manifest-ledger node,
#   -a postgrest server, and,
#  - initialize the manifest-ledger node with some transactions.
# This is the base infrastructure that will be used by the YACI service.
services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: foobar
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 10s
      timeout: 5s
      retries: 5

  manifest-ledger:
    image: ghcr.io/manifest-network/manifest-ledger:1.0.8
    volumes:
        - manifest-ledger-bin:/usr/bin
        - manifest-ledger-data:/persistent
        - ./scripts/init_manifest_ledger.sh:/usr/local/bin/init_manifest_ledger.sh:ro
    ports:
      - "9090:9090"
    entrypoint: ["/bin/bash", "-c"]
    env_file: ../.env
    command: /usr/local/bin/init_manifest_ledger.sh
    healthcheck:
      test: manifestd status | grep '"earliest_block_height":"1"'
      interval: 10s
      timeout: 5s
      retries: 5

  manifest-generate-proposals:
    restart: no
    build:
        context: ..
        dockerfile: Dockerfile.base
    volumes:
      - ./proposals:/templates
      - manifest-proposals-data:/proposals
      - ./scripts/generate_proposals.sh:/usr/local/bin/generate_proposals.sh:ro
    entrypoint: ["/bin/bash", "-c"]
    env_file: ../.env
    command: /usr/local/bin/generate_proposals.sh

  manifest-generate-templates:
    restart: no
    build:
        context: ..
        dockerfile: Dockerfile.base
    volumes:
      - ./templates:/templates
      - manifest-template-data:/generated
      - ./scripts/generate_templates.sh:/usr/local/bin/generate_templates.sh:ro
    entrypoint: ["/bin/bash", "-c"]
    env_file: ../.env
    command: /usr/local/bin/generate_templates.sh

  # Setup some transactions on the blockchain
  manifest-ledger-tx:
    restart: no
    image: ghcr.io/manifest-network/manifest-ledger:1.0.8
    volumes:
      - manifest-ledger-bin:/usr/bin
      - manifest-ledger-data:/persistent
      - tx-count:/tx-count
      - manifest-proposals-data:/proposals
      - manifest-template-data:/generated
      - ./templates:/templates
      - ./scripts/init_manifest_ledger_txs.sh:/usr/local/bin/init_manifest_ledger_txs.sh:ro
    entrypoint: ["/bin/bash", "-c"]
    env_file: ../.env
    command: /usr/local/bin/init_manifest_ledger_txs.sh
    depends_on:
      manifest-ledger:
        condition: service_healthy
      manifest-generate-proposals:
        condition: service_completed_successfully
      manifest-generate-templates:
        condition: service_completed_successfully

  postgrest:
    image: postgrest/postgrest
    restart: always
    environment:
      PGRST_DB_URI: postgres://postgres:foobar@db:5432/postgres
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: web_anon
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      manifest-ledger-tx:
        condition: service_completed_successfully # We want to wait for the transactions to be completed before starting the postgrest server

volumes:
  manifest-ledger-bin:
  manifest-ledger-data:
  manifest-proposals-data:
  manifest-template-data:
  postgres-data:
  tx-count:

